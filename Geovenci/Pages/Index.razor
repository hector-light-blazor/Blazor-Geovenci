@page "/"
@using System.Text.Json;
@using dymaptic.GeoBlazor.Core.Components.Geometries;
@inject IMapService MapService

<PageTitle>Projects</PageTitle>

    <MapView @ref="_view" Style="height: 400px; width: 100%; min-height: 100vh"  AllowDefaultEsriLogin="false" Zoom="14">
    <MudButton OnClick="OnClickMap" Variant="Variant.Filled" Color="Color.Primary">Save Extent</MudButton>
        <Map ArcGISDefaultBasemap="arcgis-topographic">


        </Map>

    </MapView>
    @*<MudDataGrid T="MapProject" Hover="true" Items="@Elements"
                 EditMode="DataGridEditMode.Form" ReadOnly="false"
                 EditTrigger="DataGridEditTrigger.Manual"
                
                 SortMode="SortMode.Multiple" Filterable="true" 
                 Bordered="true" Dense="true"
                 Hideable="true">
        <ToolBarContent>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
            <MudSpacer />
            <MudText Typo="Typo.h6">Projects</MudText>
            <MudSpacer />
            <MudTextField Placeholder="Search Project" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" IsEditable="false" />
            <PropertyColumn Property="x => x.Name" Title="Project Name" />
           
        </Columns>
        <PagerContent>
            <MudDataGridPager T="MapProject" />
        </PagerContent>
    </MudDataGrid>*@


@code {
    private MapView? _view;
    private bool _hidePosition;
    private bool _loading;
    private List<MapProject> Elements = new List<MapProject>();

    protected override void OnInitialized()
    {
        Elements.Add(new MapProject
            {

                Id = 1,
                Name = "Project 1"

            });

        Elements.Add(new MapProject
            {

                Id = 2,
                Name = "Project 2"

            });
    }

        private async Task OnClickMap()
        {
            if (_view is not null)
            {
                Extent? extent = await _view.GetExtent();
                if (extent is null) return;

                var _extentJson = JsonSerializer.Serialize(extent, new JsonSerializerOptions
                {
                    WriteIndented = true
                }).Replace(" ", "");

                var mapProject = new DTO.MapProject
                    {
                        Name = "Test Map Project",
                        Extent = _extentJson

                    };
                await MapService.CreateMapProject(mapProject);
            }
            
        
        }
    }



}

